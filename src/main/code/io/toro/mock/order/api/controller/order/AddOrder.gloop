{
    "comments": "Add order",
    "input": [
        {
            "name": "order",
            "type": "model",
            "comments": "body of the order",
            "gloopProperties": [
                {
                    "name": "status",
                    "defaultValue": "NEW",
                    "comments": "Updates the status of an order using . Allowed values are:\n\n* NEW\n* PROCESSING\n* PENDING\n* BACK_ORDER\n* COMPLETED\n* SHIPPED",
                    "choices": [
                        "NEW",
                        "PROCESSING",
                        "PENDING",
                        "BACK_ORDER",
                        "COMPLETED",
                        "SHIPPED"
                    ]
                },
                {
                    "name": "customer",
                    "type": "model",
                    "comments": "Gloop model/JSON object that contains the customer id placing this order.",
                    "gloopProperties": [
                        {
                            "name": "customerId",
                            "required": true
                        }
                    ]
                },
                {
                    "name": "orderItems",
                    "type": "model",
                    "array": true,
                    "comments": "A list of ordered items",
                    "gloopProperties": [
                        {
                            "name": "itemId"
                        },
                        {
                            "name": "quantity",
                            "type": "integer"
                        }
                    ]
                },
                {
                    "name": "customField",
                    "type": "model",
                    "comments": "Custom fields for properties that are not present in the mock api.",
                    "allowExtraProperties": true
                }
            ]
        }
    ],
    "output": [
        {
            "name": "response",
            "type": "model",
            "reference": "io.toro.mock.order.model.APIResponse",
            "allowExtraProperties": true,
            "gloopProperties": [
                {
                    "name": "order",
                    "type": "model",
                    "reference": "io.toro.mock.order.model.order.Order"
                }
            ]
        },
        {
            "name": "responseCode",
            "type": "integer",
            "defaultValue": 200
        },
        {
            "name": "APIException",
            "type": "model",
            "reference": "io.toro.martini.api.APIException"
        }
    ],
    "steps": [
        {
            "type": "invokeGloop",
            "comments": "Check if the customer being associated to the order that is about to be created exists",
            "name": "io.toro.mock.order.api.controller.customer.GetCustomer",
            "declare": [
                {
                    "variables": [
                        {
                            "name": "orderId"
                        },
                        {
                            "name": "getCustomerResponse",
                            "type": "model",
                            "reference": "io.toro.mock.order.model.APIResponse",
                            "gloopProperties": [
                                {
                                    "name": "customer",
                                    "type": "model",
                                    "reference": "io.toro.mock.order.model.customer.Customer"
                                }
                            ]
                        }
                    ]
                }
            ],
            "inputs": [
                {
                    "from": [
                        "order",
                        "customer",
                        "customerId"
                    ],
                    "to": [
                        "customerId"
                    ]
                }
            ],
            "outputs": [
                {
                    "from": [
                        "responseCode"
                    ],
                    "to": [
                        "responseCode"
                    ]
                },
                {
                    "from": [
                        "response"
                    ],
                    "to": [
                        "getCustomerResponse"
                    ]
                },
                {
                    "from": [
                        "APIException"
                    ],
                    "to": [
                        "APIException"
                    ]
                },
                {
                    "type": "set",
                    "expression": "UUID.randomUUID()",
                    "evaluate": true,
                    "to": [
                        "orderId"
                    ]
                }
            ]
        },
        {
            "type": "block",
            "blockType": "TRY_CATCH",
            "children": [
                {
                    "type": "fork",
                    "comments": "Does the customer record exists?",
                    "expression": "200",
                    "children": [
                        {
                            "type": "block",
                            "label": "200",
                            "comments": "if customer exists",
                            "children": [
                                {
                                    "type": "invokeGloop",
                                    "comments": "Executes an `INSERT` query that inserts a new order record into the database",
                                    "name": "io.toro.mock.order.sql.order.InsertOrder",
                                    "declare": [
                                        {
                                            "variables": [
                                                {
                                                    "name": "orderCreated",
                                                    "type": "boolean"
                                                }
                                            ]
                                        }
                                    ],
                                    "inputs": [
                                        {
                                            "from": [
                                                "order",
                                                "customer",
                                                "customerId"
                                            ],
                                            "to": [
                                                "insertOrderInput",
                                                "customerId"
                                            ]
                                        },
                                        {
                                            "from": [
                                                "order",
                                                "status"
                                            ],
                                            "to": [
                                                "insertOrderInput",
                                                "status"
                                            ]
                                        },
                                        {
                                            "from": [
                                                "orderId"
                                            ],
                                            "to": [
                                                "insertOrderInput",
                                                "orderId"
                                            ]
                                        },
                                        {
                                            "type": "set",
                                            "expression": "order.customField.isNullValue()? \"{}\" : order.customField.asJson(false, false)",
                                            "evaluate": true,
                                            "to": [
                                                "insertOrderInput",
                                                "customField"
                                            ]
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "type": "set",
                                            "expression": "201",
                                            "to": [
                                                "responseCode"
                                            ]
                                        },
                                        {
                                            "type": "set",
                                            "expression": "$gloopOutput.updateCount > 0",
                                            "evaluate": true,
                                            "to": [
                                                "orderCreated"
                                            ]
                                        },
                                        {
                                            "type": "set",
                                            "expression": "\"Successfully created Order with id {orderId}.\"",
                                            "evaluate": true,
                                            "to": [
                                                "response",
                                                "message"
                                            ]
                                        },
                                        {
                                            "type": "set",
                                            "expression": "SUCCESS",
                                            "to": [
                                                "response",
                                                "result"
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "fork",
                                    "expression": "orderCreated",
                                    "children": [
                                        {
                                            "type": "block",
                                            "label": "true",
                                            "children": [
                                                {
                                                    "type": "invokeGloop",
                                                    "comments": "Generates an output cursor that will allow you to do a batch insert for the ",
                                                    "name": "io.toro.mock.order.sql.order.item.InsertMultipleOrderItem",
                                                    "declare": [
                                                        {
                                                            "variables": [
                                                                {
                                                                    "name": "insertMultipleOrderItemOutputCursor",
                                                                    "type": "model",
                                                                    "array": true,
                                                                    "gloopProperties": [
                                                                        {
                                                                            "name": "id",
                                                                            "type": "object"
                                                                        },
                                                                        {
                                                                            "name": "itemId",
                                                                            "type": "object"
                                                                        },
                                                                        {
                                                                            "name": "orderId",
                                                                            "type": "object"
                                                                        },
                                                                        {
                                                                            "name": "quantity",
                                                                            "type": "object"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ],
                                                    "inputs": [
                                                        {
                                                            "type": "set",
                                                            "expression": "100",
                                                            "evaluate": true,
                                                            "to": [
                                                                "insertMultipleOrderItemInput",
                                                                "$batchSize"
                                                            ]
                                                        }
                                                    ],
                                                    "outputs": [
                                                        {
                                                            "from": [
                                                                "insertMultipleOrderItemOutputCursor"
                                                            ],
                                                            "to": [
                                                                "insertMultipleOrderItemOutputCursor"
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "iterate",
                                                    "comments": "Iterates through the order items, then maps it to the output cursor from the previous step. Doing this will add it to the batch to be executed",
                                                    "input": {
                                                        "path": [
                                                            "order",
                                                            "orderItems"
                                                        ]
                                                    },
                                                    "output": {
                                                        "path": [
                                                            "insertMultipleOrderItemOutputCursor"
                                                        ]
                                                    },
                                                    "children": [
                                                        {
                                                            "comments": "map the order items to be process to `insertMultipleOrderItemOutputCursor`",
                                                            "lines": [
                                                                {
                                                                    "from": [
                                                                        "orderId"
                                                                    ],
                                                                    "to": [
                                                                        "insertMultipleOrderItemOutputCursor",
                                                                        "orderId"
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "set",
                                                                    "expression": "UUID.randomUUID().toString()",
                                                                    "evaluate": true,
                                                                    "to": [
                                                                        "insertMultipleOrderItemOutputCursor",
                                                                        "id"
                                                                    ]
                                                                },
                                                                {
                                                                    "from": [
                                                                        "order",
                                                                        "orderItems",
                                                                        "itemId"
                                                                    ],
                                                                    "to": [
                                                                        "insertMultipleOrderItemOutputCursor",
                                                                        "itemId"
                                                                    ]
                                                                },
                                                                {
                                                                    "from": [
                                                                        "order",
                                                                        "orderItems",
                                                                        "quantity"
                                                                    ],
                                                                    "to": [
                                                                        "insertMultipleOrderItemOutputCursor",
                                                                        "quantity"
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "invokeGloop",
                                    "comments": "Get the created order, map it to a Gloop model called jsonBody, and then send it to the configured webhook",
                                    "name": "io.toro.mock.order.api.controller.order.GetOrder",
                                    "unload": [
                                        [
                                            "orderId"
                                        ]
                                    ],
                                    "inputs": [
                                        {
                                            "from": [
                                                "orderId"
                                            ],
                                            "to": [
                                                "orderId"
                                            ]
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "from": [
                                                "response",
                                                "order"
                                            ],
                                            "to": [
                                                "response",
                                                "order"
                                            ]
                                        },
                                        {
                                            "type": "set",
                                            "expression": "\"Successfully created order with id ${response.order.orderId}.\"",
                                            "evaluate": true,
                                            "to": [
                                                "response",
                                                "message"
                                            ]
                                        },
                                        {
                                            "type": "set",
                                            "expression": "SUCCESS",
                                            "to": [
                                                "response",
                                                "result"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ],
            "catch": [
                {
                    "type": "invokeCode",
                    "className": "io.toro.martini.LoggerMethods",
                    "methodName": "error",
                    "parameters": [
                        "java.lang.String"
                    ],
                    "inputs": [
                        {
                            "type": "set",
                            "expression": "$gloopException.gloopStackTrace",
                            "evaluate": true,
                            "to": [
                                "message"
                            ]
                        }
                    ]
                },
                {
                    "type": "invokeGloop",
                    "comments": "Remove the inserted order",
                    "name": "io.toro.mock.order.api.controller.order.DeleteOrder",
                    "inputs": [
                        {
                            "from": [
                                "orderId"
                            ],
                            "to": [
                                "orderId"
                            ]
                        }
                    ]
                },
                {
                    "type": "fork",
                    "comments": "Is the exception caught an SQL constraint violation?",
                    "expression": "$gloopException.message.contains( 'java.sql.SQLIntegrityConstraintViolationException' )",
                    "children": [
                        {
                            "type": "invokeCode",
                            "label": "true",
                            "comments": "If the exception caught was an SQL constraint violation, set the response code to 400",
                            "className": "io.toro.martini.LoggerMethods",
                            "methodName": "error",
                            "parameters": [
                                "java.lang.String",
                                "java.lang.Throwable"
                            ],
                            "inputs": [
                                {
                                    "from": [
                                        "$gloopException",
                                        "realException"
                                    ],
                                    "to": [
                                        "throwable"
                                    ]
                                },
                                {
                                    "from": [
                                        "$gloopException",
                                        "gloopStackTrace"
                                    ],
                                    "to": [
                                        "message"
                                    ]
                                }
                            ],
                            "outputs": [
                                {
                                    "type": "set",
                                    "expression": "400",
                                    "to": [
                                        "responseCode"
                                    ]
                                },
                                {
                                    "type": "set",
                                    "expression": "ERROR",
                                    "to": [
                                        "APIException",
                                        "result"
                                    ]
                                },
                                {
                                    "type": "set",
                                    "expression": "400",
                                    "to": [
                                        "APIException",
                                        "httpErrorCode"
                                    ]
                                },
                                {
                                    "type": "set",
                                    "expression": "A duplicate record already exists for this order.",
                                    "to": [
                                        "APIException",
                                        "message"
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "invokeCode",
                            "label": "false",
                            "comments": "else, set the response code to 500",
                            "className": "io.toro.martini.LoggerMethods",
                            "methodName": "error",
                            "parameters": [
                                "java.lang.String",
                                "java.lang.Throwable"
                            ],
                            "inputs": [
                                {
                                    "from": [
                                        "$gloopException",
                                        "message"
                                    ],
                                    "to": [
                                        "message"
                                    ]
                                },
                                {
                                    "from": [
                                        "$gloopException",
                                        "realException"
                                    ],
                                    "to": [
                                        "throwable"
                                    ]
                                }
                            ],
                            "outputs": [
                                {
                                    "type": "set",
                                    "expression": "500",
                                    "to": [
                                        "responseCode"
                                    ]
                                },
                                {
                                    "type": "set",
                                    "expression": "ERROR",
                                    "to": [
                                        "APIException",
                                        "result"
                                    ]
                                },
                                {
                                    "type": "set",
                                    "expression": "500",
                                    "to": [
                                        "APIException",
                                        "httpErrorCode"
                                    ]
                                },
                                {
                                    "type": "set",
                                    "expression": "Encountered an exception while processing the request.",
                                    "to": [
                                        "APIException",
                                        "message"
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}